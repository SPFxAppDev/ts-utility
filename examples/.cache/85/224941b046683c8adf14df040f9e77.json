{"id":"../../src/functions/replaceNonAlphanumeric.ts","dependencies":[{"name":"C:\\Users\\SergejSchwabauer\\Desktop\\Projekte\\SPFxAppDev\\ts-utility\\tsconfig.json","includedInParent":true,"mtime":1636466182598},{"name":"C:\\Users\\SergejSchwabauer\\Desktop\\Projekte\\SPFxAppDev\\ts-utility\\examples\\package.json","includedInParent":true,"mtime":1645697025264},{"name":"./isNullOrEmpty","loc":{"line":1,"column":26},"parent":"C:\\Users\\SergejSchwabauer\\Desktop\\Projekte\\SPFxAppDev\\ts-utility\\src\\functions\\replaceNonAlphanumeric.ts","resolved":"C:\\Users\\SergejSchwabauer\\Desktop\\Projekte\\SPFxAppDev\\ts-utility\\src\\functions\\isNullOrEmpty.ts"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = replaceNonAlphanumeric;\n\nvar _isNullOrEmpty = _interopRequireDefault(require(\"./isNullOrEmpty\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n *\r\n * Replaces all non-alphanumeric characters (incl. underscores) with the passed value\r\n * @param {string} value The value to replace all non-alphanumeric and non-underscore characters\r\n * @param {string} replaceValue A string containing the text to replace for non-alphanumeric and non-underscore characters. Default: ''\r\n * @return {string} A new string value without non-alphanumeric and non-underrscore characters.\r\n * @since 1.1.0\r\n */\nfunction replaceNonAlphanumeric(value, replaceValue) {\n  if (replaceValue === void 0) {\n    replaceValue = '';\n  }\n\n  if ((0, _isNullOrEmpty.default)(value)) {\n    return value;\n  }\n\n  if (typeof value !== \"string\") {\n    return value;\n  }\n\n  return value.replace(/[^\\w]/gi, replaceValue);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":12,"column":0}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":10,"column":14},"generated":{"line":20,"column":0}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":10,"column":24},"generated":{"line":20,"column":9}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":10,"column":14},"generated":{"line":20,"column":31}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":10,"column":47},"generated":{"line":20,"column":32}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":10,"column":14},"generated":{"line":20,"column":37}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":10,"column":62},"generated":{"line":20,"column":39}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":10,"column":14},"generated":{"line":20,"column":51}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":10,"column":87},"generated":{"line":20,"column":53}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":10,"column":62},"generated":{"line":21,"column":0}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":10,"column":62},"generated":{"line":21,"column":6}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":10,"column":62},"generated":{"line":21,"column":18}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":10,"column":62},"generated":{"line":21,"column":23}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":10,"column":62},"generated":{"line":21,"column":28}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":10,"column":62},"generated":{"line":21,"column":29}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":10,"column":62},"generated":{"line":21,"column":31}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":10,"column":62},"generated":{"line":22,"column":0}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":10,"column":62},"generated":{"line":22,"column":4}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":10,"column":62},"generated":{"line":22,"column":16}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":10,"column":62},"generated":{"line":22,"column":19}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":10,"column":62},"generated":{"line":22,"column":21}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":10,"column":87},"generated":{"line":23,"column":0}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":12,"column":4},"generated":{"line":25,"column":0}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":12,"column":7},"generated":{"line":25,"column":6}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":12,"column":21},"generated":{"line":25,"column":34}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":12,"column":7},"generated":{"line":25,"column":39}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":12,"column":4},"generated":{"line":25,"column":40}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":12,"column":29},"generated":{"line":25,"column":42}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":13,"column":8},"generated":{"line":26,"column":0}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":13,"column":15},"generated":{"line":26,"column":11}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":13,"column":8},"generated":{"line":26,"column":16}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":14,"column":5},"generated":{"line":27,"column":0}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":29,"column":0}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":16,"column":7},"generated":{"line":29,"column":6}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":16,"column":14},"generated":{"line":29,"column":13}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":16,"column":7},"generated":{"line":29,"column":18}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":16,"column":24},"generated":{"line":29,"column":23}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":29,"column":31}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":16,"column":34},"generated":{"line":29,"column":33}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":17,"column":8},"generated":{"line":30,"column":0}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":17,"column":15},"generated":{"line":30,"column":11}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":17,"column":8},"generated":{"line":30,"column":16}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":18,"column":5},"generated":{"line":31,"column":0}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":33,"column":0}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":20,"column":11},"generated":{"line":33,"column":9}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":20,"column":16},"generated":{"line":33,"column":14}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":20,"column":17},"generated":{"line":33,"column":15}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":20,"column":11},"generated":{"line":33,"column":22}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":20,"column":25},"generated":{"line":33,"column":23}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":20,"column":11},"generated":{"line":33,"column":32}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":20,"column":36},"generated":{"line":33,"column":34}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":20,"column":11},"generated":{"line":33,"column":46}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":33,"column":47}},{"source":"../../src/functions/replaceNonAlphanumeric.ts","name":null,"original":{"line":21,"column":1},"generated":{"line":34,"column":0}}],"sources":{"../../src/functions/replaceNonAlphanumeric.ts":"import isNullOrEmpty from './isNullOrEmpty';\r\n/**\r\n *\r\n * Replaces all non-alphanumeric characters (incl. underscores) with the passed value\r\n * @param {string} value The value to replace all non-alphanumeric and non-underscore characters\r\n * @param {string} replaceValue A string containing the text to replace for non-alphanumeric and non-underscore characters. Default: '' \r\n * @return {string} A new string value without non-alphanumeric and non-underrscore characters.\r\n * @since 1.1.0\r\n */\r\nexport default function replaceNonAlphanumeric(value: string, replaceValue: string = ''): string {\r\n\r\n    if(isNullOrEmpty(value)) {\r\n        return value;\r\n    }\r\n\r\n    if(typeof value !== \"string\") {\r\n        return value;\r\n    }\r\n\r\n    return value.replace(/[^\\w]/gi, replaceValue);\r\n}"},"lineCount":null}},"error":null,"hash":"1b3f5382e33645dc7ac7f0fea1fca838","cacheData":{"env":{}}}