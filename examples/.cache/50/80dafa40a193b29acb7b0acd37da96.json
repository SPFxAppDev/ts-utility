{"id":"../../src/functions/stripHTML.ts","dependencies":[{"name":"C:\\Users\\SergejSchwabauer\\Desktop\\Projekte\\SPFxAppDev\\ts-utility\\tsconfig.json","includedInParent":true,"mtime":1636466182598},{"name":"C:\\Users\\SergejSchwabauer\\Desktop\\Projekte\\SPFxAppDev\\ts-utility\\examples\\package.json","includedInParent":true,"mtime":1645697025264},{"name":"./isNullOrEmpty","loc":{"line":1,"column":26},"parent":"C:\\Users\\SergejSchwabauer\\Desktop\\Projekte\\SPFxAppDev\\ts-utility\\src\\functions\\stripHTML.ts","resolved":"C:\\Users\\SergejSchwabauer\\Desktop\\Projekte\\SPFxAppDev\\ts-utility\\src\\functions\\isNullOrEmpty.ts"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = stripHtml;\n\nvar _isNullOrEmpty = _interopRequireDefault(require(\"./isNullOrEmpty\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * Strips the HTML and returns only the text content\r\n * @param {string} htmlValue The HTML content from which to return the text\r\n * @return {string} the text content of passed html\r\n * @since 1.1.0\r\n */\nfunction stripHtml(htmlValue) {\n  if ((0, _isNullOrEmpty.default)(htmlValue)) {\n    return '';\n  }\n\n  return new DOMParser().parseFromString(htmlValue, 'text/html').body.textContent;\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":12,"column":0}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":8,"column":14},"generated":{"line":18,"column":0}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":8,"column":24},"generated":{"line":18,"column":9}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":8,"column":14},"generated":{"line":18,"column":18}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":8,"column":34},"generated":{"line":18,"column":19}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":8,"column":14},"generated":{"line":18,"column":28}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":8,"column":51},"generated":{"line":18,"column":30}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":9,"column":4},"generated":{"line":19,"column":0}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":9,"column":7},"generated":{"line":19,"column":6}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":9,"column":21},"generated":{"line":19,"column":34}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":9,"column":7},"generated":{"line":19,"column":43}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":9,"column":4},"generated":{"line":19,"column":44}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":9,"column":33},"generated":{"line":19,"column":46}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":10,"column":8},"generated":{"line":20,"column":0}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":10,"column":15},"generated":{"line":20,"column":11}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":10,"column":8},"generated":{"line":20,"column":13}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":11,"column":5},"generated":{"line":21,"column":0}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":13,"column":4},"generated":{"line":23,"column":0}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":13,"column":12},"generated":{"line":23,"column":9}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":13,"column":16},"generated":{"line":23,"column":13}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":13,"column":12},"generated":{"line":23,"column":22}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":13,"column":28},"generated":{"line":23,"column":25}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":13,"column":12},"generated":{"line":23,"column":40}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":13,"column":44},"generated":{"line":23,"column":41}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":13,"column":12},"generated":{"line":23,"column":50}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":13,"column":55},"generated":{"line":23,"column":52}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":13,"column":12},"generated":{"line":23,"column":63}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":13,"column":11},"generated":{"line":23,"column":64}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":13,"column":69},"generated":{"line":23,"column":65}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":13,"column":11},"generated":{"line":23,"column":69}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":13,"column":74},"generated":{"line":23,"column":70}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":13,"column":4},"generated":{"line":23,"column":81}},{"source":"../../src/functions/stripHTML.ts","name":null,"original":{"line":14,"column":1},"generated":{"line":24,"column":0}}],"sources":{"../../src/functions/stripHTML.ts":"import isNullOrEmpty from './isNullOrEmpty';\r\n/**\r\n * Strips the HTML and returns only the text content\r\n * @param {string} htmlValue The HTML content from which to return the text\r\n * @return {string} the text content of passed html\r\n * @since 1.1.0\r\n */\r\nexport default function stripHtml(htmlValue: string): string {\r\n    if(isNullOrEmpty(htmlValue)) {\r\n        return '';\r\n    }\r\n\r\n    return (new DOMParser().parseFromString(htmlValue, 'text/html')).body.textContent;\r\n}"},"lineCount":null}},"error":null,"hash":"b40273f099a36784948c1af43ff7d9f1","cacheData":{"env":{}}}